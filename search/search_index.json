{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"dvc-project-template","text":"<p>DVC project template</p>"},{"location":"#steps-","title":"STEPS -","text":""},{"location":"#step-01-create-a-repository-by-using-template-repository","title":"STEP 01- Create a repository by using template repository","text":""},{"location":"#step-02-clone-the-new-repository","title":"STEP 02- Clone the new repository","text":""},{"location":"#step-03-create-a-conda-environment-after-opening-the-repository-in-vscode","title":"STEP 03- Create a conda environment after opening the repository in VSCODE","text":"<pre><code>conda create --prefix ./env python=3.7 -y\n</code></pre> <p><pre><code>conda activate ./env\n</code></pre> OR <pre><code>source activate ./env\n</code></pre></p>"},{"location":"#step-04-install-the-requirements","title":"STEP 04- install the requirements","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"#step-05-initialize-the-dvc-project","title":"STEP 05- initialize the dvc project","text":"<pre><code>dvc init\n</code></pre>"},{"location":"#step-06-commit-and-push-the-changes-to-the-remote-repository","title":"STEP 06- commit and push the changes to the remote repository","text":""},{"location":"data_prep/","title":"Data Preparation stage","text":"<ul> <li>Convert my data into train and test.tsv in 70:30 ratio</li> </ul> <pre><code>data.xml\n    |-train.tsv\n    |-test.tsv\n</code></pre> <ul> <li>We are choosing only three tags in the xml data - 1. row Id, 2. title and body 3. Tags (Stackoverflow tags specific to python)</li> </ul> Tags features names row Id row ID title and body text stackoverflow tags Label-Python"},{"location":"featurization/","title":"Featurization Stage","text":"<pre><code>from sklearn.feature_extraction.text import CountVectorizer\nmax_features = 100\nngrams = 3 # tri gram\n# since a word can't give a proper understaing but the whole sentence will that's why Countvectorize is used\nvectorizer = CountVectorizer(max_features = max_features, ngram_range=(1, ngrams)) \nX = vectorizer.fit_transform(corpus)\nprint(vectorizer.get_feature_names_out())\n</code></pre>"}]}